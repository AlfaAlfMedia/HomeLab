# Linux System Locale Konfigurations-Skript (UTF-8)

Ein Bash-Skript zur einfachen Einstellung der System-Locale auf UTF-8 (z.B. `de_DE.UTF-8`) auf Debian-basierten Systemen, um Darstellungsprobleme von Sonderzeichen in Terminals und SSH-Clients zu beheben.

---

## ü§î Problembeschreibung

Werden Sonderzeichen wie deutsche Umlaute (√§, √∂, √º) oder andere internationale Zeichen in deiner SSH-Sitzung (MobaXterm, PuTTY etc.) oder auf der Linux-Konsole nicht korrekt angezeigt? Sie erscheinen vielleicht als Fragezeichen, Leerzeichen oder seltsame Symbole.

Das liegt fast immer an inkonsistenten Zeichenkodierungs-Einstellungen zwischen dem Server (Linux) und deinem SSH-Client. F√ºr eine korrekte Darstellung m√ºssen **beide** Seiten dieselbe Kodierung verwenden ‚Äì heutzutage ist **UTF-8** der universelle Standard.

Dieses Skript k√ºmmert sich um die **Serverseite**. Die notwendigen Einstellungen im **SSH-Client** musst du danach selbst vornehmen (siehe unten).

---

## ‚ú® Features & Was das Skript tut

* **Pr√ºft Bestehendes:** Stellt fest, ob die gew√ºnschte UTF-8 Locale bereits korrekt konfiguriert ist und beendet sich dann ohne √Ñnderungen (Idempotent).
* **Installiert Abh√§ngigkeiten:** Sorgt daf√ºr, dass das notwendige `locales`-Paket installiert ist.
* **Konfiguriert Locales:** Aktiviert die gew√ºnschte Locale in `/etc/locale.gen`.
* **Generiert Locales:** F√ºhrt `locale-gen` aus, um die Locale-Dateien zu erstellen.
* **Setzt System-Standard:** Macht die gew√ºnschte Locale zum systemweiten Standard (`localectl` oder `update-locale`).
* **Flexibel:** Die gew√ºnschte Locale (z.B. `de_DE.UTF-8`) kann einfach am Anfang des Skripts ge√§ndert werden.

---

## ‚öôÔ∏è Anforderungen

* Ein Debian-basiertes System (Debian, Ubuntu, Raspberry Pi OS, etc.).
* Root-Berechtigungen zur Ausf√ºhrung.
* Standard-Tools wie `bash`, `grep`, `sed`, `apt-get`.
* `curl` (nur f√ºr eine optionale Fehlermeldung, falls die Konfigurationsdatei nicht gefunden wird - im Locale-Skript derzeit nicht verwendet, aber im Update-Skript).

---

## üöÄ Anwendung des Skripts

1.  **Herunterladen / Erstellen:**
    Lade das Skript (`set_system_locale.sh`) herunter oder erstelle es auf deinem Server, z.B. in `/usr/local/sbin/`.
    ```bash
    # Beispiel (ersetze URL durch den Raw-Link von GitHub):
    sudo wget -O /usr/local/sbin/set_system_locale.sh [https://raw.githubusercontent.com/AlfaAlfMedia/HomeLab/blob/main/scripts/Sprache/set_german_locale.sh](https://raw.githubusercontent.comAlfaAlfMedia/HomeLab/blob/main/scripts/Sprache/set_german_locale.sh)
    ```

2.  **Anpassen (Optional):**
    Bearbeite das Skript, falls du eine andere Locale als `de_DE.UTF-8` verwenden m√∂chtest. √Ñndere die Variable `DESIRED_LOCALE` am Anfang der Datei.
    ```bash
    sudo nano /usr/local/sbin/set_system_locale.sh
    ```

3.  **Ausf√ºhrbar machen:**
    ```bash
    sudo chmod +x /usr/local/sbin/set_system_locale.sh
    ```

4.  **Als Root ausf√ºhren:**
    ```bash
    sudo /usr/local/sbin/set_system_locale.sh
    ```

5.  **‚ÄºÔ∏è WICHTIG: Server neu starten oder neu anmelden!**
    Die √Ñnderungen werden erst nach einem **Neustart des Servers** (`sudo reboot`) oder einem **vollst√§ndigen Ab- und erneuten Anmelden** per SSH wirksam!

---

## üíª Wichtig: Konfiguration des SSH-Clients!

Nachdem der Server korrekt konfiguriert ist, muss auch dein SSH-Client auf deinem Computer UTF-8 verwenden.

### Beispiel: MobaXterm

1.  √ñffne MobaXterm.
2.  Gehe zu **Settings** -> **Configuration**.
3.  W√§hle den Reiter **Terminal**.
4.  Stelle sicher, dass **"Terminal characters set"** auf **`UTF-8`** steht.
5.  Gehe zum Reiter **SSH**.
6.  Stelle sicher, dass **"Use UTF-8 encoding for SSH connections"** **aktiviert** ist.
7.  Klicke **OK**.
8.  **Schlie√üe die bestehende SSH-Sitzung** und √∂ffne sie **neu**.

### Beispiel: PuTTY

1.  Starte PuTTY.
2.  Lade deine gespeicherte Sitzung oder w√§hle "Default Settings".
3.  Gehe links zu **Window** -> **Translation**.
4.  W√§hle bei **"Remote character set"** die Option **`UTF-8`**.
5.  *Empfohlen:* Gehe zur√ºck zu **Session**, w√§hle die Sitzung erneut aus und klicke **Save**, um die Einstellung zu speichern.
6.  √ñffne die Verbindung. Falls sie bereits offen war, **schlie√üe sie und √∂ffne sie neu**.

---

## ‚úÖ Testen

Wenn Server **und** Client konfiguriert sind und die SSH-Sitzung neu gestartet wurde:

1.  Verbinde dich per SSH.
2.  Gib ein: `echo "Test: √Ñpfel √ñffnen √úbermut - √§√∂√º √Ñ√ñ√ú √ü ‚Ç¨"`
3.  Die Ausgabe sollte nun korrekt sein.

---

*Disclaimer: Dieses Skript √§ndert Systemkonfigurationen. Benutzung auf eigene Gefahr.*
